import operator


english_alphabet = (tuple(list('qwertyuiopasdfghjklzxcvbnm')))
russian_alphabet = (tuple(list('йцукенгшщзхъфывапролджэёячсмитьбю')))
# Сортировка словаря (параметры: словарь, индекс, сортировка(убыв/возр)
def dict_sorted(dictionary, index, bool_reverse):
    return dict(sorted(dictionary.items(), key=operator.itemgetter(index), reverse=bool_reverse))


# Перевод в другие с.о.
print(int('A', 16))
print(int('100', 8))


# Вывод первого и последнего элементов списка
lst = [1, 2, 3, 4, 5]
print(f'Первый: {lst[0]}; последний: {lst[-1]}')


# Определяет расширение функции
def get_extension(filename):
    filename_parts = filename.split('.')
    if len(filename_parts) < 2:  # filename has no dots
        raise ValueError('the file has no extension')
    first, *middle, last = filename_parts
    if not last or not first and not middle:
        # example filenames: .filename, filename., file.name.
        raise ValueError('the file has no extension')
    return filename_parts[-1]


# Подсчёт количества символов или слов в строке(параметры: строка, что искать)
def string_counter(line, what_find):
    return line.count(what_find)


# Swap(x, y) => (y, x)
x = 5
y = 2
x, y = y, x


# Проверка типа с преобразовании в int если не str(возвращает тип и переменную)
def check(stroka):
    if stroka.isdigit():
        chislo = int(stroka)
        answer = 'int'
        return answer, chislo

    else:
        answer = 'str'
        return answer, stroka


print(check('m12'))

'''
S.islower() - Состоит ли строка из символов в нижнем регистре
S.isupper()	- Состоит ли строка из символов в верхнем регистре
S.istitle()	- Начинаются ли слова в строке с заглавной буквы
S.upper()   - Преобразование строки к верхнему регистру
S.lower()	- Преобразование строки к нижнему регистру
S.capitalize() - Переводит первый символ строки в верхний регистр, а все остальные в нижний
S.lstrip([chars]) - Удаление пробельных символов в начале строки
S.rstrip([chars]) - Удаление пробельных символов в конце строки
S.strip([chars]) - Удаление пробельных символов в начале и в конце строки
'''
# Проверка начинается ли строка с одной из букв в параметре
print('m12'.startswith(english_alphabet))

# Сборка строки из списка с разделителем ''
print('_'.join(['q', 'w', 'e', 'r', 'y']))

# Форматирование строки
print('{0} {1} {2}'.format('I', 'L', 'Y'))
print('{}, {}, {}'.format('a', 'b', 'c'))
print('Coordinates: ({x},{y})'.format(x='1', y='2'))
'{:*^30}'.format('centered')

'''
list.append(x)	-   Добавляет элемент в конец списка
list.extend(L)	-   Расширяет список list, добавляя в конец все элементы списка L
list.insert(i, x)	-   Вставляет на i-ый элемент значение x
list.remove(x)	-   Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует
list.pop([i])	-   Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент
list.index(x, [start [, end]])	-   Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
list.count(x)	-   Возвращает количество элементов со значением x
list.sort([key=функция])	-   Сортирует список на основе функции
list.reverse()	-   Разворачивает список
list.copy()     -   Поверхностная копия списка
list.clear()	-   Очищает список
'''

# Срез
lst = ['1', '2', '3', '4', '5']
print(lst[:])
print(lst[1:])
print(lst[:3])
print(lst[1:3])
print(lst[::2])
print(lst[::-1])

# Словари

d1 = dict(short='dict', long='dictionary')
#{'short': 'dict', 'long': 'dictionary'}
d2 = dict([(1, 1), (2, 4)])
#{1: 1, 2: 4}
d3 = dict.fromkeys(['a', 'b'])
#{'a': None, 'b': None}
d4 = dict.fromkeys(['a', 'b'], 100)
#{'a': 100, 'b': 100}

'''
dict.clear() - очищает словарь.

dict.copy() - возвращает копию словаря.

classmethod dict.fromkeys(seq[, value]) - создает словарь с ключами из seq и значением value (по умолчанию None).

dict.get(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None).

dict.items() - возвращает пары (ключ, значение).

dict.keys() - возвращает ключи в словаре.

dict.pop(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение).

dict.popitem() - удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены.

dict.setdefault(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ с значением default (по умолчанию None).

dict.update([other]) - обновляет словарь, добавляя пары (ключ, значение) из other. Существующие ключи перезаписываются. Возвращает None (не новый словарь!).

dict.values() - возвращает значения в словаре.
'''

